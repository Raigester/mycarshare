version: '3.8'

services:
  # База даних PostgreSQL
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для Celery
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django веб-додаток
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    command: >
      sh -c "mkdir -p /app/media &&
            cp -n /app/initial_media/* /app/media/ 2>/dev/null || true &&
            pip install --no-cache-dir -r requirements.txt &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn carsharing.wsgi:application --bind 0.0.0.0:8000 --workers=4 --timeout=120"

  # Celery worker для фонових задач
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - db
    env_file:
      - ./.env
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt &&
             celery -A carsharing worker -l info"
    volumes:
      - .:/app

  # Celery beat для планувальника задач
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - redis
      - db
      - celery
    env_file:
      - ./.env
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt &&
             celery -A carsharing beat -l info"
    volumes:
      - .:/app

  # Nginx для проксіювання запитів і обслуговування статичних файлів
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web
    restart: always

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: